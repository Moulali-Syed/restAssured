Serialization and Deserialization of request/response with POJO classes:

Serialization in rest assured context is a process of converting a java object into request body(payload)

Rest Assured also supports deserialization by converting response body back to java object

Advantages:
Easy to parse and extract response(Json/XML) values if they are wrapped as java object
User friendly methods can be created which makes code more readable

Design Approach:
Java object is constructed with support of POJO classes
POJO classes are created based on the request /response payload

What additional libraries required?
For json you need to have either jackson , jackson2 , gson or johnzon in the classpath and for XML you need JAXB



******************************************************************************************************************************************************
Plain old java objects:POJO classes

suppose consider below is the payload we have to send

{
"message":"Hello"
}

for every key create a private instance variable and a public get and set methods , to access and set value to it

Serialization Demo below:

package pojos;

/*
 {
"message":"Hello",
"greet":"Hi"
 }
 
 */
public class AMessage {

	private String message;
	private String greet;
	
	public void setMessage(String message) {
		this.message = message;
	}

	public String getMessage() {
		return message;
	}
	
	public void setGreet(String greet) {
		this.greet = greet;
	}

	public String getGreet() {
		return greet;
	}
}

/*
 * now with above code we have created , below json with out any values 
 {
"message":"",
"greet":""
 }
 */

/*
//create java objects
Message m = new Message();
m.setMessage("Hello");
m.setGreet("Hi");
*/


//Now we can send the object to rest assured code
given().
	body(m).
when().
	post("/message")
******************************************************************************************************************************************************

Deserialization:  get values from the response - getter methods play  a major role

Message m = new Message();
m.getMessage();
m.getGreet();


Inorder to deserialize and work with complex json responses , we have to use additional libraries
search jackson databind maven , and add below 3 dependencies

<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.13.3</version>
</dependency>

<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-core</artifactId>
    <version>2.13.3</version>
</dependency>

<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations -->
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-annotations</artifactId>
    <version>2.13.3</version>
</dependency>

and then add gson dependecy

<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
<dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>2.9.0</version>
</dependency>


paste the complex json response into a jsoneditoronline.org
and see the proper response tags

No matter we are doing serialization or deserialization , first create POJO classes

say we have a response as below

url: website.com
services: projectSupport
expertise: Automation
courses {3}
instructor: RahulShetty
linkedIn: https://www.linkedIn.com/in

To create POJO
define private variables of all the above 6 keys
Then right click - Sources - Generate getters and setters

package pojos;

public class BGetCourse {

	private String url;
	private String services;
	private String automation;
	private String Courses;
	private String instructor;
	private String linkedIn;
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}
	public String getServices() {
		return services;
	}
	public void setServices(String services) {
		this.services = services;
	}
	public String getAutomation() {
		return automation;
	}
	public void setAutomation(String automation) {
		this.automation = automation;
	}
	public String getCourses() {
		return Courses;
	}
	public void setCourses(String courses) {
		Courses = courses;
	}
	public String getInstructor() {
		return instructor;
	}
	public void setInstructor(String instructor) {
		this.instructor = instructor;
	}
	public String getLinkedIn() {
		return linkedIn;
	}
	public void setLinkedIn(String linkedIn) {
		this.linkedIn = linkedIn;
	}
}



under courses {3}
we have 3 sub json , and in addition each json is a nested array of json

courses: {
	"webAutomation" : [
		{
			"courseTitle": "Selenium WebDriver Java",
			"price" : "50"
		},
		{
			"courseTitle": "Cypress",
			"price" : "40"		
		},
		{
			"courseTitle": "Protractor",
			"price" : "40"
		}	
	],
	"api"		    : [
		{
			"courseTitle": "Rest Assured",
			"price" : "50"
		},
		{
			"courseTitle": "SOAP UI",
			"price" : "40"		
		},
	],
	"mobile"        : [
		{
			"courseTitle": "Rest Assured",
			"price" : "50"
		},	
	]
}


"courses": {3}
  "webAutomation": [3],
  "api": [2],
  "mobile": [1]

in courses we have 3 child ,lets create pojo for courses

package pojos;

//after creating this go back to main class change return type of Courses
public class CCourses {

	private String webAutomation;
	private String api;
	private String mobile;
	public String getWebAutomation() {
		return webAutomation;
	}
	public void setWebAutomation(String webAutomation) {
		this.webAutomation = webAutomation;
	}
	public String getApi() {
		return api;
	}
	public void setApi(String api) {
		this.api = api;
	}
	public String getMobile() {
		return mobile;
	}
	public void setMobile(String mobile) {
		this.mobile = mobile;
	}
}

//modify the GetCourse class
package pojos;

public class BGetCourse {

	private String url;
	private String services;
	private String automation;
	private CCourses Courses;
	private String instructor;
	private String linkedIn;
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}
	public String getServices() {
		return services;
	}
	public void setServices(String services) {
		this.services = services;
	}
	public String getAutomation() {
		return automation;
	}
	public void setAutomation(String automation) {
		this.automation = automation;
	}
	public CCourses getCourses() {
		return Courses;
	}
	public void setCourses(CCourses courses) {
		Courses = courses;
	}
	public String getInstructor() {
		return instructor;
	}
	public void setInstructor(String instructor) {
		this.instructor = instructor;
	}
	public String getLinkedIn() {
		return linkedIn;
	}
	public void setLinkedIn(String linkedIn) {
		this.linkedIn = linkedIn;
	}
}


package pojos;

//after creating this go back to main class change return type of Courses
public class CCourses {

	private String webAutomation;
	private String api;
	private String mobile;
	public String getWebAutomation() {
		return webAutomation;
	}
	public void setWebAutomation(String webAutomation) {
		this.webAutomation = webAutomation;
	}
	public String getApi() {
		return api;
	}
	public void setApi(String api) {
		this.api = api;
	}
	public String getMobile() {
		return mobile;
	}
	public void setMobile(String mobile) {
		this.mobile = mobile;
	}
}


Now we have the sub json in each of the three webAutomation ,api, mobile

package pojos;

import java.util.List;

//after creating this go back to main class change return type of Courses
public class CCourses {

	private List<DWebAutomation> webAutomation;
	private List<EApi> api;
	private FMobile mobile;

	public List<DWebAutomation> getWebAutomation() {
		return webAutomation;
	}

	public void setWebAutomation(List<DWebAutomation> webAutomation) {
		this.webAutomation = webAutomation;
	}

	public List<EApi> getApi() {
		return api;
	}

	public void setApi(List<EApi> api) {
		this.api = api;
	}

	public FMobile getMobile() {
		return mobile;
	}

	public void setMobile(FMobile mobile) {
		this.mobile = mobile;
	}

}


package pojos;

public class DWebAutomation {

	private String courseTitle;
	private String price;
	public String getCourseTitle() {
		return courseTitle;
	}
	public void setCourseTitle(String courseTitle) {
		this.courseTitle = courseTitle;
	}
	public String getPrice() {
		return price;
	}
	public void setPrice(String price) {
		this.price = price;
	}
	
}

package pojos;

public class EApi {

	private String courseTitle;
	private String price;
	public String getCourseTitle() {
		return courseTitle;
	}
	public void setCourseTitle(String courseTitle) {
		this.courseTitle = courseTitle;
	}
	public String getPrice() {
		return price;
	}
	public void setPrice(String price) {
		this.price = price;
	}
	
}

package pojos;

public class FMobile {

	private String courseTitle;
	private String price;
	public String getCourseTitle() {
		return courseTitle;
	}
	public void setCourseTitle(String courseTitle) {
		this.courseTitle = courseTitle;
	}
	public String getPrice() {
		return price;
	}
	public void setPrice(String price) {
		this.price = price;
	}
	
}
******************************************************************************************************************************************************
End to End to automation examples using POJO Deserialization:

//when passing the payload , if content-type is text/html then give expect().defaultParser(Parser.JSON)
		
		BGetCourse gc = given().queryParam("access_token", "accessToken")
				.expect().defaultParser(Parser.JSON)
		.when()
		.get("https://rahulshettyacademy.com/getCourse.php").as(BGetCourse.class);
		
		//now we can access all methods
		System.out.println(gc.getLinkedIn());
		System.out.println(gc.getInstructor());



******************************************************************************************************************************************************
complete testcase for all the above

package pojos;

import static io.restassured.RestAssured.given;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;
import io.restassured.RestAssured;
import io.restassured.parsing.Parser;
import io.restassured.path.json.JsonPath;
public class GOAuthAutomation2dot0 {

	
	public static void main(String[] args) throws InterruptedException {
		
		/*
		//Because of latest updates by google , we cannot automate the authentication
		//so we have to do it manually
		//get authorization code - for this we need browser invocation
		WebDriverManager.chromedriver().setup();
		WebDriver driver = new ChromeDriver();
		driver.get("");
		driver.findElement(By.cssSelector("input[type='email']")).sendKeys("demo123");
		driver.findElement(By.cssSelector("input[type='email']")).sendKeys(Keys.ENTER);
		Thread.sleep(3000);
		driver.findElement(By.cssSelector("input[type='password']")).sendKeys("demo123");
		driver.findElement(By.cssSelector("input[type='password']")).sendKeys(Keys.ENTER);
		Thread.sleep(4000);
		String url = driver.getCurrentUrl();
		*/
		String url = "getThis Url by doing manually";
		String partialCode = url.split("code=")[1];
		String code = partialCode.split("&scope")[0];
		System.out.println(code);
		
		
		//get access token - its a post request
		String accessTokenResponse = given().urlEncodingEnabled(false).queryParam("code", code)
		.queryParams("client_id", "692183103107-p0m7ent2hk7suguv4vq22hjcfhcr43pj.apps.googleusercontent.com")
		.queryParams("client_secret","erZOWM9g3UtwNRj340YYaK_W")
		.queryParams("redirect_uri","https://rahulshettyacademy.com/getCourse.php")
		.queryParams("grant_type","authorization_code")
		.when().log().all()
		.post("https://www.googleapis.com/oauth2/v4/token").asString();
		
		JsonPath js = new JsonPath(accessTokenResponse);
		String accessToken  = js.getString("access_token");
		
		
		//using the above generated access token
		
		//when passing the payload , if content-type is text/html then give expect().defaultParser(Parser.JSON)
		
		BGetCourse gc = given().queryParam("access_token", "accessToken")
				.expect().defaultParser(Parser.JSON)
		.when()
		.get("https://rahulshettyacademy.com/getCourse.php").as(BGetCourse.class);
		
		//now we can access all methods
		System.out.println(gc.getLinkedIn());
		System.out.println(gc.getInstructor());
		
		
	}
}
******************************************************************************************************************************************************

Solving complex queries from json with simple POJO methods

		BGetCourse gc = given().queryParam("access_token", "accessToken")
				.expect().defaultParser(Parser.JSON)
		.when()
		.get("https://rahulshettyacademy.com/getCourse.php").as(BGetCourse.class);
		
		//now we can access all methods
		System.out.println(gc.getLinkedIn());
		System.out.println(gc.getInstructor());
		
		//get a course title which is present inside api
		System.out.println( gc.getCourses().getApi().get(1).getCourseTitle());
		
		//what if we added many courses under the api , and we need a particular course price
		//we can get all the courses , store it in a list and iterate through it and get the required
		List<EApi> apiCourses = gc.getCourses().getApi();
		for(int i=0;i<apiCourses.size();i++) {
			if(apiCourses.get(i).getCourseTitle().equals("SoapUI Webservices testing")) {
			 System.out.println(apiCourses.get(i).getPrice());
			}
		}

		//print course titles from webAutomation
		List<DWebAutomation> webCourses = gc.getCourses().getWebAutomation();
		for(int i=0;i<webCourses.size();i++) {
			System.out.println(webCourses.get(i).getCourseTitle());
		}

******************************************************************************************************************************************************

we have some list of courses stored in array , then from response we are checking whether all courses are present or not

		String[] courseTitles = {"Selenium WebDriver Java","Cypress","Protractor"};
		//print course titles from webAutomation
		ArrayList<String> a = new ArrayList<>();
		List<DWebAutomation> webCourses = gc.getCourses().getWebAutomation();
		
		for(int i=0;i<webCourses.size();i++) {
			System.out.println(webCourses.get(i).getCourseTitle());
			a.add(webCourses.get(i).getCourseTitle());
			
		}
		
		List<String> expectedList =  Arrays.asList(courseTitles);
		Assert.assertTrue(a.equals(expectedList));
		



******************************************************************************************************************************************************
Complete End to End test:

package pojos;

import static io.restassured.RestAssured.given;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.testng.Assert;

import io.restassured.parsing.Parser;
import io.restassured.path.json.JsonPath;
public class GOAuthAutomation2dot0 {

	
	public static void main(String[] args) throws InterruptedException {
		
		String[] courseTitles = {"Selenium WebDriver Java","Cypress","Protractor"};
		/*
		//Because of latest updates by google , we cannot automate the authentication
		//so we have to do it manually
		//get authorization code - for this we need browser invocation
		WebDriverManager.chromedriver().setup();
		WebDriver driver = new ChromeDriver();
		driver.get("");
		driver.findElement(By.cssSelector("input[type='email']")).sendKeys("demo123");
		driver.findElement(By.cssSelector("input[type='email']")).sendKeys(Keys.ENTER);
		Thread.sleep(3000);
		driver.findElement(By.cssSelector("input[type='password']")).sendKeys("demo123");
		driver.findElement(By.cssSelector("input[type='password']")).sendKeys(Keys.ENTER);
		Thread.sleep(4000);
		String url = driver.getCurrentUrl();
		*/
		String url = "getThis Url by doing manually";
		String partialCode = url.split("code=")[1];
		String code = partialCode.split("&scope")[0];
		System.out.println(code);
		
		
		//get access token - its a post request
		String accessTokenResponse = given().urlEncodingEnabled(false).queryParam("code", code)
		.queryParams("client_id", "692183103107-p0m7ent2hk7suguv4vq22hjcfhcr43pj.apps.googleusercontent.com")
		.queryParams("client_secret","erZOWM9g3UtwNRj340YYaK_W")
		.queryParams("redirect_uri","https://rahulshettyacademy.com/getCourse.php")
		.queryParams("grant_type","authorization_code")
		.when().log().all()
		.post("https://www.googleapis.com/oauth2/v4/token").asString();
		
		JsonPath js = new JsonPath(accessTokenResponse);
		String accessToken  = js.getString("access_token");
		
		
		//using the above generated access token
		
		//when passing the payload , if content-type is text/html then give expect().defaultParser(Parser.JSON)
		
		BGetCourse gc = given().queryParam("access_token", "accessToken")
				.expect().defaultParser(Parser.JSON)
		.when()
		.get("https://rahulshettyacademy.com/getCourse.php").as(BGetCourse.class);
		
		//now we can access all methods
		System.out.println(gc.getLinkedIn());
		System.out.println(gc.getInstructor());
		
		//get a course title which is present inside api
		System.out.println( gc.getCourses().getApi().get(1).getCourseTitle());
		
		//what if we added many courses under the api , and we need a particular course price
		//we can get all the courses , store it in a list and iterate through it and get the required
		List<EApi> apiCourses = gc.getCourses().getApi();
		for(int i=0;i<apiCourses.size();i++) {
			if(apiCourses.get(i).getCourseTitle().equals("SoapUI Webservices testing")) {
			 System.out.println(apiCourses.get(i).getPrice());
			}
		}
		
		//print course titles from webAutomation
		ArrayList<String> a = new ArrayList<>();
		List<DWebAutomation> webCourses = gc.getCourses().getWebAutomation();
		
		for(int i=0;i<webCourses.size();i++) {
			System.out.println(webCourses.get(i).getCourseTitle());
			a.add(webCourses.get(i).getCourseTitle());
			
		}
		
		List<String> expectedList =  Arrays.asList(courseTitles);
		Assert.assertTrue(a.equals(expectedList));
		
	}
}



******************************************************************************************************************************************************