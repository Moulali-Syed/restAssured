understanding structure of complex nested json and its array notations:

Json used in this Section with Queries to solve
{

"dashboard": {

"purchaseAmount": 910,

"website": "rahulshettyacademy.com"

},

"courses": [

{

"title": "Selenium Python",

"price": 50,

"copies": 6

},

{

"title": "Cypress",

"price": 40,

"copies": 4

},

{

"title": "RPA",

"price": 45,

"copies": 10

}

]

}



1. Print No of courses returned by API

2.Print Purchase Amount

3. Print Title of the first course

4. Print All course titles and their respective Prices

5. Print no of copies sold by RPA Course

6. Verify if Sum of all Course prices matches with Purchase Amount
*************************************************************************************************************************************************
go to https://jsoneditoronline.org/
and paste the above json

inside Payload.java , create a static method

public static String coursePrice() {
		return "{\r\n"
				+ "  \"dashboard\": {\r\n"
				+ "    \"purchaseAmount\": 910,\r\n"
				+ "    \"website\": \"rahulshettyacademy.com\"\r\n"
				+ "  },\r\n"
				+ "  \"courses\": [\r\n"
				+ "    {\r\n"
				+ "      \"title\": \"Selenium Python\",\r\n"
				+ "      \"price\": 50,\r\n"
				+ "      \"copies\": 6\r\n"
				+ "    },\r\n"
				+ "    {\r\n"
				+ "      \"title\": \"Cypress\",\r\n"
				+ "      \"price\": 40,\r\n"
				+ "      \"copies\": 4\r\n"
				+ "    },\r\n"
				+ "    {\r\n"
				+ "      \"title\": \"RPA\",\r\n"
				+ "      \"price\": 45,\r\n"
				+ "      \"copies\": 10\r\n"
				+ "    }\r\n"
				+ "  ]\r\n"
				+ "}";
	}

Create a class ComplexJsonParse

Suppose application is in development stage and we know a dummy response and request , we can mock that using the request payload , and using JsonPath class 
creating object of it and passing the payload as parameter to it

public static void main(String[] args) {
		JsonPath js = new JsonPath(Payload.coursePrice());
		

*************************************************************************************************************************************************
//1. Print No of courses returned by API

		//1. Print No of courses returned by API
		int count = js.getInt("courses.size()");
		System.out.println(count);


*************************************************************************************************************************************************
//2.Print Purchase Amount
		int totalAmount = js.getInt("dashboard.purchaseAmount");
		System.out.println(totalAmount);

*************************************************************************************************************************************************
//3. Print Title of the first course
		String firstTitle = js.get("courses[0].title");
		System.out.println(firstTitle);

*************************************************************************************************************************************************
//4. Print All course titles and their respective Prices
		for(int i=0;i<count;i++) {
		String courseTitles  = js.get("courses["+i+"].title");
		System.out.println(js.get("courses["+i+"].price").toString());
		System.out.println(courseTitles);
		}

*************************************************************************************************************************************************
5. Print no of copies sold by RPA Course
//5. Print no of copies sold by RPA Course
		for(int i=0;i<count;i++) {
			String title = js.get("courses["+i+"].title");
			if(title.equalsIgnoreCase("RPA")) {
				int noOfCopies = js.getInt("courses["+i+"].copies");
				System.out.println(noOfCopies + " copies of RPA");
				break;
			}
		}

*************************************************************************************************************************************************
6. Verify if Sum of all Course prices matches with Purchase Amount

		//6. Verify if Sum of all Course prices matches with Purchase Amount
		int purchaseAmt = js.getInt("dashboard.purchaseAmount");
		int sum = 0;
		
		for(int i=0;i<count;i++) {
			int amt = js.getInt("courses["+i+"].price") * js.getInt("courses["+i+"].copies");
			sum+=amt;
		}
		
		Assert.assertEquals(purchaseAmt,sum);
		System.out.println(purchaseAmt+" "+sum);
*************************************************************************************************************************************************
package basics;

import org.testng.Assert;

import file.Payload;
import io.restassured.path.json.JsonPath;

public class ComplexJsonParse {

	public static void main(String[] args) {
		JsonPath js = new JsonPath(Payload.coursePrice());
		
		//1. Print No of courses returned by API
		int count = js.getInt("courses.size()");
		System.out.println(count);
		
//		2.Print Purchase Amount
		int totalAmount = js.getInt("dashboard.purchaseAmount");
		System.out.println(totalAmount);
		
		//3. Print Title of the first course
		String firstTitle = js.get("courses[0].title");
		System.out.println(firstTitle);
		
		
		//4. Print All course titles and their respective Prices
		for(int i=0;i<count;i++) {
		String courseTitles  = js.get("courses["+i+"].title");
		System.out.println(js.get("courses["+i+"].price").toString());
		System.out.println(courseTitles);
		}
		
		//5. Print no of copies sold by RPA Course
		for(int i=0;i<count;i++) {
			String title = js.get("courses["+i+"].title");
			if(title.equalsIgnoreCase("RPA")) {
				int noOfCopies = js.getInt("courses["+i+"].copies");
				System.out.println(noOfCopies + " copies of RPA");
				break;
			}
		}
//		int noOfCopies = js.getInt("courses[2].copies");
//		System.out.println(noOfCopies);
		
		//6. Verify if Sum of all Course prices matches with Purchase Amount
		int purchaseAmt = js.getInt("dashboard.purchaseAmount");
		int sum = 0;
		
		for(int i=0;i<count;i++) {
			int amt = js.getInt("courses["+i+"].price") * js.getInt("courses["+i+"].copies");
			sum+=amt;
		}
		
		Assert.assertEquals(purchaseAmt,sum);
		System.out.println(purchaseAmt+" "+sum);
	}
}
